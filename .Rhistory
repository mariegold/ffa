geom_point(mapping = aes(x = Sepal.Width, y = Sepal.Length, colour = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Width, y = Sepal.Length, colour = Species)) +
labs(x = "sepal width", y = "sepal length") +
ggtitle ("Sepal length vs sepal length for different species")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Width, y = Sepal.Length, colour = Species)) +
labs(x = "sepal width", y = "sepal length") +
ggtitle ("Sepal length vs sepal width for different species")
head(iris)
setosa <- iris[Species == 'setosa']
attach(iris)
setosa <- iris[Species == 'setosa']
setosa <- iris[iris$Species == 'setosa']$Sepal.Length
setosa <- iris[iris$Species == 'setosa', ]$Sepal.Length
setosa
setosa <- iris[iris$Species == 'setosa', Sepal.Length]
setosa <- iris[iris$Species == 'setosa', Siris$epal.Length]
setosa <- iris[iris$Species == 'setosa', iris$epal.Length]
setosa
setosa
setosa <- iris[iris$Species == 'setosa', iris$Sepal.Length]
setosa <- iris[iris$Species == 'setosa',]$Sepal.Length
species <- rep(1:3, c(length(setosa),length(versacolor), length(virginica)))
versacolor <- iris[iris$Species == 'versacolor',]$Sepal.Length
virginica <- iris[iris$Species == 'virginica',]$Sepal.Length
sepal <- c(setosa, versicolor, virginica)
sepal <- c(setosa, versacolor, virginica)
species <- rep(1:3, c(length(setosa),length(versacolor), length(virginica)))
kruskal.test(sepal, species)
boxplot(sepal ~ species)
species
length(versacolor)
head(iris)
unique(iris$Species)
setosa <- iris[iris$Species == 'setosa',]$Sepal.Length
versicolor <- iris[iris$Species == 'versicolor',]$Sepal.Length
virginica <- iris[iris$Species == 'virginica',]$Sepal.Length
sepal <- c(setosa, versicolor, virginica)
species <- rep(1:3, c(length(setosa),length(versicolor), length(virginica)))
kruskal.test(sepal, species)
boxplot(sepal ~ species)
setosa <- iris[iris$Species == 'setosa',]$Sepal.Length
versicolor <- iris[iris$Species == 'versicolor',]$Sepal.Length
virginica <- iris[iris$Species == 'virginica',]$Sepal.Length
sepal <- c(setosa, versicolor, virginica)
species <- rep(1:3, c(length(setosa),length(versicolor), length(virginica)))
kruskal.test(sepal, species)
boxplot(sepal ~ species)
ggplot(data = df, mapping = aes(x = species, y = sepal)) +
geom_boxplot()
df <- data.frame(species,sepal)
ggplot(data = df, mapping = aes(x = species, y = sepal)) +
geom_boxplot()
ggplot(data = df, mapping = aes(group = species, y = sepal)) +
geom_boxplot()
boxplot(sepal ~ species)
ggplot(data = df, mapping = aes(group = species, y = sepal)) +
geom_boxplot()
species
ggplot(data = df, mapping = aes(group = species, y = sepal)) +
geom_boxplot()
ggplot(data = df, mapping = aes(x = species, y = sepal)) +
geom_boxplot()
ggplot(data = df, mapping = aes(group = species, y = sepal)) +
geom_boxplot() +
scale_x_discrete(name = "Month")
ggplot(data = df, mapping = aes(group = species, y = sepal)) +
geom_boxplot() +
scale_x_discrete(name = "species")
boxplot(sepal ~ species)
boxplot(sepal ~ species, xlab = "species". ylab = "sepal length")
boxplot(sepal ~ species, xlab = "species", ylab = "sepal length")
boxplot(sepal ~ species, xlab = "species", ylab = "sepal length", main = "Diffence in sepal length by species")
boxplot(sepal ~  rep(c('setosa', 'versacolor', 'virginica'), c(length(setosa),length(versicolor), length(virginica))), xlab = "species", ylab = "sepal length", main = "Diffence in sepal length by species")
kruskal.test(sepal, species)
kruskal.test(sepal, species)
ppois(6,0.5815)
1-ans
1-ppois(6,0.5815)
1-pnorm(0.9/sqrt(1/6),0,1)
pnorm(sqrt(3)/2,0,1)
pnorm(sqrt(3),0,1)
1-0.9583677
2*(1-pnorm(sqrt(3),0,1))
> m1 <- c(2,1,3,5,4,8,7,6)
> m2 <- c(1,2,4,5,7,6,8,3)
> cor.test(m1, m2, method = "kendall")
m1 <- c(2,1,3,5,4,8,7,6)
m2 <- c(1,2,4,5,7,6,8,3)
cor.test(m1, m2, method = "kendall")
c <- cor.test(m1, m2, method = "kendall")
c$parameter
c$p.value
m1 <- c(2,1,3,5,4,8,7,9)
m2 <- c(1,2,4,5,7,6,8,3,9)
cor.test(m1, m2, method = "kendall")
D.A <- c(1.96,2.24,1.71,2.41,1.62,1.93)
D.B <- c(2.11,2.43,2.07,2.71,2.50,2.84,2.88)
qqnorm(D.A); qqline(D.A)
qqnorm(D.B); qqline(D.B)
qqnorm(D.A); qqline(D.A)
qqnorm(D.B); qqline(D.B)
?dpois
dpois(60,68.67)*dpois(5,7.33)
optimisation()
FLtools::optimisation()
remotes::install_bitbucket("finnlindgren/FLtools", dep = TRUE)
install.packages('remotes')
remotes::install_bitbucket("finnlindgren/FLtools", dep = TRUE)
FLtools::optimisation()
library(devtools)
install_github("NVE/fitdistrib")
install_github("NVE/FlomKart")
remove.packages("RNetCDF")
install_github("NVE/FlomKart")
install.packages("RNetCDF")
install.packages("RNetCDF")
R.version.string
library(devtools)
install.packages("devtools")
install_github("NVE/fitdistrib")
install_github("NVE/fitdistrib")
library(devtools)
install_github("NVE/fitdistrib")
install_github("NVE/FlomKart")
install.packages('RNetCDF')
install.packages("NVE/FlomKart",type="source",repos=c("https://github.com/NVE/FlomKart", "http://cran.rstudio.com"))
library(devtools)
install_github("NVE/fitdistrib")
install_github("NVE/FlomKart")
library(readxl)
library(devtools)
install_github("NVE/fitdistrib")
install_github("NVE/FlomKart")
data <- read_excel('Pearl River - USGS02486000.xlsx', sheet = 1)
attach(data)
plot(DecYear, `Annual Peak Streamflow (cfs)`)
setwd("~/Desktop/Maths Project/Jackson, MS")
data <- read_excel('Pearl River - USGS02486000.xlsx', sheet = 1)
attach(data)
plot(DecYear, `Annual Peak Streamflow (cfs)`)
install.packages('RNetCDF')
config.log
~/.R/Makevar
~/.R/Makevars
~/.R/Makevars
~/.R/Makevars
./configure CC="gcc"
Sys.setenv(CONDA_BUILD_SYSROOT="/")
install.packages("tidyverse")
install.packages('RNetCDF')
install_github("NVE/FlomKart")
library(NVE/FlomKart)
library("NVE/FlomKart")
library("FlomKart")
setwd("~/Desktop/Maths Project/Jackson, MS")
library(readxl)
library(devtools)
install_github("NVE/fitdistrib")
install_github("NVE/FlomKart")
library("FlomKart")
data <- read_excel('Pearl River - USGS02486000.xlsx', sheet = 1)
attach(data)
plot(DecYear, `Annual Peak Streamflow (cfs)`)
View(data)
library(mle)
mle(x=data,dist='weibull',start=c(.1,.1))
mle(x=data,dist='weibull',start=c(.1,.1))
library(FAmle)
install.packages('FAmle')
library(FAmle)
mle(x=data,dist='weibull',start=c(.1,.1))
data
?sort
data <- data[order(DecYear),]
mle(x=data,dist='weibull',start=c(.1,.1))
data
mle(x=data[,`Annual Peak Streamflow (cfs)`],dist='weibull',start=c(.1,.1))
data[,`Annual Peak Streamflow (cfs)`]
mle(x=data[, 2],dist='weibull',start=c(.1,.1))
data[, 2]
summary(data)
str(data)
str(data[,2])
data <- data[order(DecYear),]
data
mle(x=data[, 2], dist='weibull',start=c(.1,.1))
data <- data.frame(data[order(DecYear),])
data
plot(DecYear, `Annual Peak Streamflow (cfs)`)
mle(x=data[, 2], dist='weibull',start=c(.1,.1))
plot(DecYear, `Annual Peak Streamflow (cfs)`, type="l")
# sort by date and convert to dataframe
data <- data.frame(data[order(DecYear),])
plot(DecYear, `Annual Peak Streamflow (cfs)`, type="l")
attach(data)
plot(DecYear, `Annual Peak Streamflow (cfs)`, type="l")
data
# sort by date and convert to dataframe
data <- data.frame(data[order(DecYear),])
data
attach(data)
plot(DecYear, `Annual Peak Streamflow (cfs)`, type="l")
data
colnames(data)[2] <- "aps"
data
attach(data)
plot(DecYear, aps, type="l")
mle(x=data[, 2], dist='weibull',start=c(.1,.1))
mle(x=aps, dist='weibull',start=c(.1,.1))
plot(x=mle,ci=TRUE,alpha=0.05)
mle <- mle(x=aps, dist='weibull',start=c(.1,.1))
plot(x=mle,ci=TRUE,alpha=0.05)
mle <- mle(x=aps, dist='gumbel',start=c(.1,.1))
mle <- mle(x=aps, dist='gumbell',start=c(.1,.1))
mle <- mle(x=aps, dist='weibull',start=c(.1,.1))
library(evd)
mle <- mle(x=aps, dist='gumbell',start=c(.1,.1))
mle <- mle(x=aps, dist='gumbel',start=c(.1,.1))
mle <- mle(x=aps, dist='gumbel',start=c(1,1))
mle <- mle(x=aps, dist='gumbel',start=c(0,0))
mle <- mle(x=aps, dist='gumbel',start=c(0.001,0.001))
mle <- mle(x=aps, dist='gumbel',start=c(-0.001,-0.001))
?dgev
mle <- mle(x=aps, dist='gumbel',start=c(0.1,0.1,01))
mle <- mle(x=aps, dist='gumbel',start=c(0.1,0.1,0.1))
mle <- mle(x=aps, dist='gumbel',start=c(0.1,0.1))
?dgumbel
gumbel_mle(aps)
library("FlomKart")
library(FlomKart)
gumbel_mle(aps)
library(NVE)
library(fitdistrib)
gumbel_mle(aps)
estimate <- gumbel_mle(aps)
FlomKartShinyApp::plot4server(aps, param = estimate$estimate, distr = 1)
library(FlomKartShinyApp)
install_github("NVE/FlomKartShinyApp")
install_github("FlomKartShinyApp")
# calculate summary statistics
mu, s <- mean(data), std(data)
# outlier checking
mu, s <- mean(data), std(data)
# outlier checking
mu <- mean(data); sd <-  std(data)
# outlier checking
mu <- mean(data); sd <-  sdd(data)
# outlier checking
mu <- mean(data); sd <-  sd(data)
# outlier checking
mu <- mean(aps); sd <- sd(aps)
aps <- data[, 2]
# outlier checking
mu <- mean(aps); sd <- sd(aps)
cutoff <- 3*s
# outlier checking
mu <- mean(aps); s <- sd(aps)
cutoff <- 3*s
lwr, upr <- mu - cutoff, mu + cutoff
lwr <- mu - cutoff; upr <- mu + cutoff
setwd("~/Desktop/Maths Project/code")
# visualisation
plot(DecYear, `Annual Peak Streamflow (cfs)`)
attach(data)
# sort by date and convert to dataframe
data <- data.frame(data[order(DecYear),])
attach(data)
# sort by date and convert to dataframe
data <- data.frame(data[order(DecYear),])
data
aps <- data[, 2]; dyear <- data[, 6]
# visualisation
plot(dyear, aps)
# visualisation
plot(dyear, aps, type="l")
mu <- mean(aps)
mu
s <- sd(aps)
s <- sd(aps)
s
lwr <- mu - 3*s; upr <- mu + 3*s
lwr
upr <- mu + 3*s
upr
lwr <- mu - 3*s; upr <- mu + 2*s
upr
lwr <- mu - 3*s; upr <- mu + 3*s
data[DecYear > 1899,]
# remove period prior to 1900 (not enough data)
data_processed <- data[DecYear > 1899,]
# sort by date and convert to dataframe
data_processed <- data.frame(data_processed[order(DecYear),])
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# outlier checking
mu <- mean(aps); s <- sd(aps)
lwr <- mu - 3*s; upr <- mu + 3*s
mu
aps
data_processed
# sort by date and convert to dataframe
data_processed <- data.frame(data_processed[order(DecYear),])
# remove period prior to 1900 (not enough data)
data_processed <- data[DecYear > 1899,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# outlier checking
mu <- mean(aps); s <- sd(aps)
lwr <- mu - 3*s; upr <- mu + 3*s
upr
mu
# read in data
data <- read_excel('Pearl River - USGS02486000.xlsx', sheet = 1)
attach(data)
setwd("~/Desktop/Maths Project/code")
# read in data
data <- read_excel('Pearl River - USGS02486000.xlsx', sheet = 1)
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
attach(data)
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[DecYear > 1899,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[DecYear > 1899,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$DecYear > 1899,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# outlier checking
mu <- mean(aps); s <- sd(aps)
upr <- mu + 3*s
mu
upr
View(data_processed)
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
attach(data)
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$Year > 1899,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# outlier checking
mu <- mean(aps); s <- sd(aps)
upr <- mu + 3*s
mu
upr
# remove outlier (more than 3 sds above mean)
data_processed <- data_processed[aps > upr,]
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$Year > 1899,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
# visualisation
plot(dyear, aps, type="l")
# outlier checking
mu <- mean(aps); s <- sd(aps)
upr <- mu + 3*s
# remove outlier (more than 3 sds above mean)
data_processed <- data_processed[aps < upr,]
aps <- data_processed[, 2]; dyear <- data_processed[, 6]
plot(dyear, aps, type="l")
?group_by
data_processed %>%
group_by(Year) %>%
summarise(Value = max(aps))
library(dplyr)
data_processed %>%
group_by(Year) %>%
summarise(Value = max(aps))
as.dataframe(data_processed %>%
group_by(Year) %>%
summarise(Value = max(aps)))
data.frame(data_processed %>%
group_by(Year) %>%
summarise(Value = max(aps)))
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) from data_processed group by Year")
library(sqldf)
install.packages("sqldf")
library(sqldf)
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) from data_processed group by Year")
aps <- data_processed[, 2];
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) from data_processed group by Year")
colnames(data_processed)[2] <- "aps"
data_processed
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
colnames(data_processed)[2] <- "aps"
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) from data_processed group by Year")
data_processe
data_processed
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$Year > 1899,]
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
colnames(data_processed)[2] <- "aps"
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) from data_processed group by Year")
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$Year > 1899,]
# visualisation
plot(Year, aps, type="l")
# read in data
data <- read_excel('data/Pearl River - USGS02486000.xlsx', sheet = 1)
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
colnames(data_processed)[2] <- "aps"
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$Year > 1899,]
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) from data_processed group by Year")
attach(data_processed)
# visualisation
plot(Year, aps, type="l")
data_processed
# sort by date and convert to dataframe
data_processed <- data.frame(data[order(DecYear),])
colnames(data_processed)[2] <- "aps"
# remove period prior to 1900 (not enough data)
data_processed <- data_processed[data_processed$Year > 1899,]
# drop minimum value in years with multiple values
data_processed <- sqldf("select Year, max(aps) as aps from data_processed group by Year")
attach(data_processed)
# visualisation
plot(Year, aps, type="l")
# outlier checking
mu <- mean(aps); s <- sd(aps)
mu
upr <- mu + 3*s
upr
View(data_processed)
# remove outlier (more than 3 sds above mean)
data_processed <- data_processed[aps < upr,]
attach(data_processed)
plot(dyear, aps, type="l")
plot(Year, aps, type="l")
View(data_processed)
?order
# rank observations in decreasing order
data_ranked <- data_processed[order(aps, decreasing = TRUE),]
data_ranked
?seq
seq(1,108)
data_ranked["rank"] <- seq(1,dim(data_processed)[1])
View(data_ranked)
# MLE estimation
library(FAmle)
mle(x=aps, dist='weibull',start=c(.1,.1))
plot(mle(x=aps, dist='weibull',start=c(.1,.1)))
View(data_ranked)
fit_distr(aps, distr = "weibull", method = "mle")
fit_distr(aps, distr = "normal", method = "mle")
fit_distr(aps, distr = "norm", method = "mle")
fit_distr(aps, distr = "gumbel", method = "mle")
install_github("NVE/fitdistrib")
library(fitdistrib)
fit_distr(aps, distr = "gumbel", method = "mle")
fit_distr(aps, distr = "gumbel", method = "MLE")
library(FlomKartShinyApp)
install_github("NVE/FlomKartShinyApp")
install_github("FlomKartShinyApp")
fitdistrib(aps, "gamma", start=c(1,1)))
fitdistrib(aps, "gamma", start=c(1,1))
library(MASS)
fitdistrib(aps, "gamma", start=c(1,1))
fitdistrib(aps, "gamma", start=c(1,1))
library(MASS)
fitdistrib(aps, "gamma", start=c(1,1))
fitdistr(aps, "gamma", start=c(1,1))
fitdistr(aps, "gamma", start=list(shape=1,rate=1))
data_ranked <- data_ranked[order(Year),]
attach(data_ranked)
library(MASS)
fitdistr(aps, "gamma", start=list(shape=1,rate=1))
aps
View(data_ranked)
data_ranked <- data_ranked[order(Year),]
attach(data_ranked)
fitdistr(aps, "gamma", start=list(shape=1,rate=1))
apas
aps
fitdistr(aps, "gamma")
