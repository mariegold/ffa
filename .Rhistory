beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i]-mean(Rep.events[])) + beta2*EADS1[i] + beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
# Run JAGS to the completion of the "adaption" stage
results.avalanches.A <- jags.model(file=textConnection(avalanches.model),
data=avalanches.data, inits=avalanches.inits,
n.chains=3, quiet=TRUE)
# Burn-in of 5000 iterations
update(results.avalanches.A, n.iter=20000)
results.avalanches.B <- coda.samples(results.avalanches.A,
variable.names=c("beta0","beta1", "beta2","beta3"),n.iter=100000, thin=50)
summary(results.avalanches.B)
avalanches.data2 <- list(n=nrow(Avalanches)+1,Deaths=c(Deaths, NA), Rep.events=c(Rep.events, 20), EADS1=c(EADS1, 0), EADS2=c(EADS2, 1))
results.const.A2 <- jags.model(file=textConnection(avalanches.model),
data=avalanches.data2, inits=avalanches.inits,
n.chains=3, quiet = TRUE)
update(results.const.A2, n.iter=20000)
results.const.B2 <- coda.samples(results.const.A2,
variable.names=c("Deaths[35]"),n.iter=100000, thin=50)
summary(results.const.B2)
# (b)
avalanche.model <- "model {
# Hyperparameters
beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i]-mean(Rep.events[])+beta2*EADS1[i]+beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
inits1 <- function(){
beta0 <- rnorm(1,0,10)
beta1 <- rnorm(1,0,10)
beta2 <- rnorm(1,0,10)
beta3 <- rnorm(1,0,10)
return(list(beta0=beta0, beta1=beta1, beta2=beta2, beta3=beta3))
}
n <- dim(avalanches)[1]
Rep.events.c <- avalanches$Rep.events - mean(avalanches$Rep.events)
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
fit.avalanches <- as.data.frame(combine.mcmc(results.const.B2))
Deaths.predict <- fit.avalanches[,1]
length(Deaths.predict[Deaths.predict<15])/length(Deaths.predict)
avalanches$EADS1
EADS1
EADS2
avalanches$EADS2
EADS1 <- EADS2 <- numeric(n)
EADS1[avalanches$Season>=1994 & avalanches$Season<=2003 ] <- 1
EADS2[avalanches$Season>=2004] <- 1
# (b)
avalanche.model <- "model {
# Hyperparameters
beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i]-mean(Rep.events[])+beta2*EADS1[i]+beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
inits1 <- function(){
beta0 <- rnorm(1,0,10)
beta1 <- rnorm(1,0,10)
beta2 <- rnorm(1,0,10)
beta3 <- rnorm(1,0,10)
return(list(beta0=beta0, beta1=beta1, beta2=beta2, beta3=beta3))
}
n <- dim(avalanches)[1]
Rep.events.c <- avalanches$Rep.events - mean(avalanches$Rep.events)
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(EADS1,0), EADS2=c(EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
# (b)
avalanche.model <- "model {
# Hyperparameters
beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i]-mean(Rep.events[])+beta2*EADS1[i]+beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
inits1 <- function(){
beta0 <- rnorm(1,0,10)
beta1 <- rnorm(1,0,10)
beta2 <- rnorm(1,0,10)
beta3 <- rnorm(1,0,10)
return(list(beta0=beta0, beta1=beta1, beta2=beta2, beta3=beta3))
}
n <- dim(avalanches)[1]
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(EADS1,0), EADS2=c(EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
# (b)
avalanche.model <- "model {
# Hyperparameters
beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i]-mean(Rep.events[]))+beta2*EADS1[i]+beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
inits1 <- function(){
beta0 <- rnorm(1,0,10)
beta1 <- rnorm(1,0,10)
beta2 <- rnorm(1,0,10)
beta3 <- rnorm(1,0,10)
return(list(beta0=beta0, beta1=beta1, beta2=beta2, beta3=beta3))
}
n <- dim(avalanches)[1]
Rep.events.c <- avalanches$Rep.events - mean(avalanches$Rep.events)
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(EADS1,0), EADS2=c(EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
setwd("~/Desktop/Bayesian Data Analysis/Assignment 2")
library(dplyr)
library(rjags)
library(MASS)
library(runjags)
avalanches <- read.csv("Avalanches.csv", header = TRUE, sep = ";", fileEncoding = "UTF-8-BOM")
# Question 1
# (a)
avalanches$EADS1 <- as.factor(ifelse((avalanches$Season > 1993) & (avalanches$Season < 2004), 1, 0))
avalanches$EADS2 <- as.factor(ifelse(avalanches$Season > 2003, 1, 0))
avalanches$period <-  2
avalanches[avalanches$Season < 1995, "period"] <-  1
avalanches[avalanches$Season > 2003, "period"] <-  3
# (b)
avalanche.model <- "model {
# Hyperparameters
beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i]-mean(Rep.events[]))+beta2*EADS1[i]+beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
inits1 <- function(){
beta0 <- rnorm(1,0,10)
beta1 <- rnorm(1,0,10)
beta2 <- rnorm(1,0,10)
beta3 <- rnorm(1,0,10)
return(list(beta0=beta0, beta1=beta1, beta2=beta2, beta3=beta3))
}
n <- dim(avalanches)[1]
Rep.events.c <- avalanches$Rep.events - mean(avalanches$Rep.events)
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
avalanches$EADS1
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(EADS1,0), EADS2=c(EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
avalanches$EADS1 <- ifelse((avalanches$Season > 1993) & (avalanches$Season < 2004), 1, 0)
avalanches$EADS2 <- ifelse(avalanches$Season > 2003, 1, 0)
#avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
#avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
combined <- as.data.frame(combine.mcmc(res.avalanches))
p15 <- dim(combined[combined$`Deaths[35]`< 15, ])[1]/dim(combined)[1]
p15
# (b)
avalanche.model <- "model {
# Hyperparameters
beta.mu.0 <- 0
beta.tau.0 <- 0.001
# prior
beta0 ~ dnorm(beta.mu.0,beta.tau.0)
beta1 ~ dnorm(beta.mu.0,beta.tau.0)
beta2 ~ dnorm(beta.mu.0,beta.tau.0)
beta3 ~ dnorm(beta.mu.0,beta.tau.0)
#Likelihood
for(i in 1:n) {
log(mu[i]) <- beta0+beta1*(Rep.events[i])+beta2*EADS1[i]+beta3*EADS2[i]
Deaths[i] ~ dpois(mu[i])
}
}"
inits1 <- function(){
beta0 <- rnorm(1,0,10)
beta1 <- rnorm(1,0,10)
beta2 <- rnorm(1,0,10)
beta3 <- rnorm(1,0,10)
return(list(beta0=beta0, beta1=beta1, beta2=beta2, beta3=beta3))
}
n <- dim(avalanches)[1]
Rep.events.c <- avalanches$Rep.events - mean(avalanches$Rep.events)
avalanche.data <- list(n=n+1,Deaths=c(avalanches$Deaths, NA),Rep.events=c(Rep.events.c, 20-mean(avalanches$Rep.events)), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
#avalanche.data <- list(n=n+1, Deaths=c(avalanches$Deaths, NA),Rep.events=c(avalanches$Rep.events, 20), EADS1=c(avalanches$EADS1,0), EADS2=c(avalanches$EADS2,1))
mod.avalanches <- jags.model(file=textConnection(avalanche.model), data=avalanche.data, inits=inits1, n.chains=3)
update(mod.avalanches, n.iter=20000)
res.avalanches <- coda.samples(mod.avalanches, variable.names=c("beta0","beta1","beta2","beta3", "Deaths[35]"),n.iter=100000, thin=50)
summary(res.avalanches)
setwd("~/Desktop/Maths Project/code")
source('fitting.R')
stations <- list(Jackson = "USGS02486000",
Edinburg = "USGS02482000",
Carthage = "USGS02482550",
Lena = "USGS02483500",
Rockport = "USGS02488000",
Monticello = "USGS02488500",
Columbia = "USGS02489000",
Bogalusa = "USGS02489500")
Jackson_best <- c("pwme","pwme", "mle", "mle", "mle", "mle","pwme", "pwme")
Bogalusa_best <- c("mle","mle", "mle", "mle", "mme", "pwme","pwme", "pwme")
Columbia_best <- c("mle","pwme", "mle", "pwme", "pwme", "pwme","pwme", "pwme")
Monticello_best <- c("mle","pwme", "mle", "mle", "pwme", "mle","pwme", "pwme")
Edinburg_best <- c("mle","pwme", "mle", "mle", "pwme", "mle","pwme", "pwme")
Carthage_best <- c("pwme","pwme", "mle", "mle", "pwme", "pwme","mle", "pwme")
Rockport_best <- c("pwme","pwme", "mle", "pwme", "pwme", "pwme","pwme", "pwme")
Lena_best <- c("pwme","pwme", "mle", "mle", "mle", "mle","mle", "pwme")
all_best <- list(Jackson_best, Edinburg_best, Carthage_best, Lena_best, Rockport_best, Monticello_best, Columbia_best, Bogalusa_best)
fit <- function(distr, method) {
if (distr == "norm") {
estim <- normal(aps, method, log = FALSE, rp = return_periods, plotx = xseq)
}
if (distr == "lognorm") {
estim <- normal(log(aps), method, log = TRUE, rp = return_periods, plotx = xseq)
}
if (distr == "expo") {
estim <- exponential(aps, rp = return_periods, plotx = xseq)
}
if (distr == "gam") {
estim <- gam(aps, method, rp = return_periods, plotx = xseq)
}
if (distr == "p3") {
estim <- p3(aps, method, rp = return_periods, plotx = xseq)
}
if (distr == "lp3") {
estim <- lp3(log(aps), method, rp = return_periods, plotx = xseq)
}
if (distr == "gum") {
estim <- gumb(aps, method, rp = return_periods, plotx = xseq)
}
if (distr == "wei") {
estim <- weibull(aps, method, rp = return_periods, plotx = xseq)
}
estim
}
nstations <- length(stations)
lskew <- numeric(nstations)
lkurt <- numeric(nstations)
xskew <- numeric(nstations)
nobs <- numeric(nstations)
for (i in 1:nstations) {
station <- names(stations)[i]
data <- read_excel(paste0("data/", stations[i], ".xls"), sheet = 1)
lmoment_ratios <- lmoms(data$`Annual Peak Streamflow (cfs)`)$ratios
lskew[i] <- lmoment_ratios[3]
lkurt[i] <- lmoment_ratios[4]
# xskew[i] <- skew(log(data$`Annual Peak Streamflow (cfs)`))
pdf(file = paste0("~/Desktop/Maths Project/assets/images/", station, ".pdf"),
width = 8,
height = 6)
out <- preprocessing(data)
data_processed <- out$processed
data_sorted <- out$sorted
aps <- out$aps
nobs[i] <- length(aps)
return_periods <- (dim(data_sorted)[1]+1)/data_sorted$rank
best <- unlist(all_best[i])
plot(log(return_periods), data_sorted$aps, xlab = "Return period (years)", ylab = "Discharge (cfs)", xaxt="n")
estim <- fit("norm", best[1])
lines(log(return_periods), estim$xt, col=2, lwd=2)
estim <- fit("lognorm", best[2])
lines(log(return_periods), estim$xt, col=3, lwd=2)
estim <- fit("expo", best[3])
lines(log(return_periods), estim$xt, col=8, lwd=2)
estim <- fit("gam", best[4])
lines(log(return_periods), estim$xt, col=5, lwd=2)
estim <- fit("p3", best[5])
lines(log(return_periods), estim$xt, col=6, lwd=2)
estim <- fit("lp3", best[6])
lines(log(return_periods), estim$xt, col=4, lwd=2)
estim <- fit("gum", best[7])
lines(log(return_periods), estim$xt, col="orange", lwd=2)
estim <- fit("wei", best[8])
lines(log(return_periods), estim$xt, col=9, lwd=2)
legend("bottomright", col = c(1, 2,3,8,5,6,4,"orange",9), lty = c(NA, rep(1,8)), pch=c(1, rep(NA,8)), c("Data", "Normal","Log-normal", "Exponential", "Gamma", "Pearson III", "Log-Pearson III", "Gumbel", "Weibull"))
at.x <- log(c(1,5,10,25,50,75,100))
axis(1, at=at.x, labels=round(exp(at.x), 0), las=1)
dev.off()
}
# log-Pearson 3 L-moments
tau0 <- c(-0.2308, -0.1643, -0.0740, 0, 0.0774, 0.1701, 0.2366)
coef <- matrix(c(0.0602, -0.1673, 0.8010, 0.2897, 0.0908, -0.1267, 0.7636, 0.2562, 0.1166, -0.0439, 0.6247, 0.2939, 0.1220, 0.0238,
0.6677, 0.1677, 0.1152, 0.0639, 0.7486, 0.0645, 0.1037, 0.0438, 0.9327, -0.0951, 0.0776, 0.0762, 0.9771, -0.1394),
byrow=TRUE, nrow=7)
tau4 <- matrix(NA, nrow=7, ncol=124)
for(i in 1:7) {
tau3 <- seq(tau0[i], 1,0.01)
if (124-length(tau3) > 0) {
tau4[i,] <- c(rep(NA, 124-length(tau3)), coef[i,] %*% matrix(c(rep(1, length(tau3)),tau3, tau3^2, tau3^3), byrow=TRUE, nrow=4))
} else {
tau4[i,] <- coef[i,] %*% matrix(c(rep(1, length(tau3)),tau3, tau3^2, tau3^3), byrow=TRUE, nrow=4)
}
}
plotlmrdia(lmrdia(), xlim=c(0,1), xlab = "L-skewness", ylab ="L-kurtosis", noglo = TRUE, nosla = TRUE, nouni = TRUE, noray = TRUE, nocau = TRUE, nogpa = TRUE, nogov = TRUE, noaep4 = TRUE)
points(lskew, lkurt)
points(weighted.mean(lskew, nobs), weighted.mean(lkurt, nobs), pch=19, col="aquamarine3")
polygon(c(seq(tau0[1], 1,0.01),rev(seq(tau0[1], 1,0.01))),
c(apply(tau4, 2, min, na.rm=TRUE), rev(apply(tau4, 2, max, na.rm=TRUE))),
col=rgb(0, 0, 0.75,0.25), border = NA)
legend("topleft", ncol = 2,
col=c(2, 4, 2, 6, rgb(0, 0, 0.75,0.25), 2, 2, 8, 1, "aquamarine3"),
lty=c(NA, 2, NA, 1, 1, NA, 2, 1, NA, NA),
lwd=c(NA, 1, NA, 1, 8, NA, 1, 2, NA), NA,
pch=c(15, NA, 16, NA, NA, 17, NA, NA, 1, 19),
c("Normal", "Log-normal", "Exponential", "Pearson III", "Log-Pearson III", "Gumbel", "Weibull", "L-moment limit", "Stations", "Weighted mean"))
estim <- fit("gum", best[7])
lines(log(return_periods), estim$xt, col="orange", lwd=2)
gumb <- function(aps, "mle", rp = return_periods, plotx=xseq)
gumb <- function(aps, method="mle", rp = return_periods, plotx=xseq)
)
gumb(aps, method="mle", rp = return_periods, plotx=xseq)
aps
x=aps
method="mle"
# if (method == "mle") {
#   fit <- summary(fevd(x, type="Gumbel"))
#   params <- fit$par; sds <- fit$se.theta
# } else { sds <- NA }
fit1 <- eevd(x, method = method, ci=TRUE, ci.parameter = "location")
fit2 <- eevd(x, method = method, ci=TRUE, ci.parameter = "scale")
params <-  fit1$parameter; df <- fit1$interval$dof; n <- fit1$interval$dof
ub1 <- fit1$interval$limits[2];  ub2 <- fit2$interval$limits[2]
sd_loc <- (ub1-params[1])/qt(0.975,df); sd_scale <- (ub2-params[2])/qt(0.975,df)
xt <- params[1] - params[2]*log(-log(1-1/rp))
rp = return_periods
xt <- params[1] - params[2]*log(-log(1-1/rp))
ad <- try(ad.test(x, null = "pgumbel", alpha=params[1], scale=params[2])$statistic)
?ad.test
setwd("~/Desktop/Maths Project/code")
source('fitting.R')
stations <- list(Jackson = "USGS02486000",
Edinburg = "USGS02482000",
Carthage = "USGS02482550",
Lena = "USGS02483500",
Rockport = "USGS02488000",
Monticello = "USGS02488500",
Columbia = "USGS02489000",
Bogalusa = "USGS02489500")
Jackson_best <- c("pwme","pwme", "mle", "mle", "mle", "mle","pwme", "pwme")
Bogalusa_best <- c("mle","mle", "mle", "mle", "mme", "pwme","pwme", "pwme")
Columbia_best <- c("mle","pwme", "mle", "pwme", "pwme", "pwme","pwme", "pwme")
Monticello_best <- c("mle","pwme", "mle", "mle", "pwme", "mle","pwme", "pwme")
Edinburg_best <- c("mle","pwme", "mle", "mle", "pwme", "mle","pwme", "pwme")
Carthage_best <- c("pwme","pwme", "mle", "mle", "pwme", "pwme","mle", "pwme")
Rockport_best <- c("pwme","pwme", "mle", "pwme", "pwme", "pwme","pwme", "pwme")
Lena_best <- c("pwme","pwme", "mle", "mle", "mle", "mle","mle", "pwme")
all_best <- list(Jackson_best, Edinburg_best, Carthage_best, Lena_best, Rockport_best, Monticello_best, Columbia_best, Bogalusa_best)
fit <- function(distr, method) {
if (distr == "norm") {
estim <- normal(aps, method, log = FALSE, rp = return_periods, plotx = xseq)
}
if (distr == "lognorm") {
estim <- normal(log(aps), method, log = TRUE, rp = return_periods, plotx = xseq)
}
if (distr == "expo") {
estim <- exponential(aps, rp = return_periods, plotx = xseq)
}
if (distr == "gam") {
estim <- gam(aps, method, rp = return_periods, plotx = xseq)
}
if (distr == "p3") {
estim <- p3(aps, method, rp = return_periods, plotx = xseq)
}
if (distr == "lp3") {
estim <- lp3(log(aps), method, rp = return_periods, plotx = xseq)
}
if (distr == "gum") {
estim <- gumb(aps, method, rp = return_periods, plotx = xseq)
}
if (distr == "wei") {
estim <- weibull(aps, method, rp = return_periods, plotx = xseq)
}
estim
}
nstations <- length(stations)
lskew <- numeric(nstations)
lkurt <- numeric(nstations)
xskew <- numeric(nstations)
nobs <- numeric(nstations)
for (i in 1:nstations) {
station <- names(stations)[i]
data <- read_excel(paste0("data/", stations[i], ".xls"), sheet = 1)
lmoment_ratios <- lmoms(data$`Annual Peak Streamflow (cfs)`)$ratios
lskew[i] <- lmoment_ratios[3]
lkurt[i] <- lmoment_ratios[4]
# xskew[i] <- skew(log(data$`Annual Peak Streamflow (cfs)`))
pdf(file = paste0("~/Desktop/Maths Project/assets/images/", station, ".pdf"),
width = 8,
height = 6)
out <- preprocessing(data)
data_processed <- out$processed
data_sorted <- out$sorted
aps <- out$aps
nobs[i] <- length(aps)
return_periods <- (dim(data_sorted)[1]+1)/data_sorted$rank
best <- unlist(all_best[i])
plot(log(return_periods), data_sorted$aps, xlab = "Return period (years)", ylab = "Discharge (cfs)", xaxt="n")
estim <- fit("norm", best[1])
lines(log(return_periods), estim$xt, col=2, lwd=2)
estim <- fit("lognorm", best[2])
lines(log(return_periods), estim$xt, col=3, lwd=2)
estim <- fit("expo", best[3])
lines(log(return_periods), estim$xt, col=8, lwd=2)
estim <- fit("gam", best[4])
lines(log(return_periods), estim$xt, col=5, lwd=2)
estim <- fit("p3", best[5])
lines(log(return_periods), estim$xt, col=6, lwd=2)
estim <- fit("lp3", best[6])
lines(log(return_periods), estim$xt, col=4, lwd=2)
estim <- fit("gum", best[7])
lines(log(return_periods), estim$xt, col="orange", lwd=2)
estim <- fit("wei", best[8])
lines(log(return_periods), estim$xt, col=9, lwd=2)
legend("bottomright", col = c(1, 2,3,8,5,6,4,"orange",9), lty = c(NA, rep(1,8)), pch=c(1, rep(NA,8)), c("Data", "Normal","Log-normal", "Exponential", "Gamma", "Pearson III", "Log-Pearson III", "Gumbel", "Weibull"))
at.x <- log(c(1,5,10,25,50,75,100))
axis(1, at=at.x, labels=round(exp(at.x), 0), las=1)
dev.off()
}
# log-Pearson 3 L-moments
tau0 <- c(-0.2308, -0.1643, -0.0740, 0, 0.0774, 0.1701, 0.2366)
coef <- matrix(c(0.0602, -0.1673, 0.8010, 0.2897, 0.0908, -0.1267, 0.7636, 0.2562, 0.1166, -0.0439, 0.6247, 0.2939, 0.1220, 0.0238,
0.6677, 0.1677, 0.1152, 0.0639, 0.7486, 0.0645, 0.1037, 0.0438, 0.9327, -0.0951, 0.0776, 0.0762, 0.9771, -0.1394),
byrow=TRUE, nrow=7)
tau4 <- matrix(NA, nrow=7, ncol=124)
for(i in 1:7) {
tau3 <- seq(tau0[i], 1,0.01)
if (124-length(tau3) > 0) {
tau4[i,] <- c(rep(NA, 124-length(tau3)), coef[i,] %*% matrix(c(rep(1, length(tau3)),tau3, tau3^2, tau3^3), byrow=TRUE, nrow=4))
} else {
tau4[i,] <- coef[i,] %*% matrix(c(rep(1, length(tau3)),tau3, tau3^2, tau3^3), byrow=TRUE, nrow=4)
}
}
plotlmrdia(lmrdia(), xlim=c(0,1), xlab = "L-skewness", ylab ="L-kurtosis", noglo = TRUE, nosla = TRUE, nouni = TRUE, noray = TRUE, nocau = TRUE, nogpa = TRUE, nogov = TRUE, noaep4 = TRUE)
points(lskew, lkurt)
points(weighted.mean(lskew, nobs), weighted.mean(lkurt, nobs), pch=19, col="aquamarine3")
polygon(c(seq(tau0[1], 1,0.01),rev(seq(tau0[1], 1,0.01))),
c(apply(tau4, 2, min, na.rm=TRUE), rev(apply(tau4, 2, max, na.rm=TRUE))),
col=rgb(0, 0, 0.75,0.25), border = NA)
legend("topleft",
col=c(2, 4, 2, 6, rgb(0, 0, 0.75,0.25), 2, 2, 8, 1, "aquamarine3"),
lty=c(NA, 2, NA, 1, 1, NA, 2, 1, NA, NA),
lwd=c(NA, 1, NA, 1, 8, NA, 1, 2, NA), NA,
pch=c(15, NA, 16, NA, NA, 17, NA, NA, 1, 19),
c("Normal", "Log-normal", "Exponential", "Pearson III", "Log-Pearson III", "Gumbel", "Weibull", "L-moment limit", "Stations", "Weighted mean"))
shiny::runApp()
